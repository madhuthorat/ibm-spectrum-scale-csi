/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// CSIScaleOperatorSpec specifies the desired state of CSI
type CSIScaleOperatorSpec struct {

	// +Optional

	// Attacher image for CSI (actually attaches to the storage)
	Attacher string `json:"attacher,omitempty"`

	// Node selector for Attacher sidecar
	AttacherNodeSelector []CSINodeSelector `json:"attacherNodeSelector"`

	// A collection of gpfs CSICluster properties for the csi driver to mount
	Clusters []CSICluster `json:"clusters"`

	// +Optional

	// Sidecar container image for the csi spectrum scale plugin pods
	DriverRegistrar string `json:"driverRegistrar"`

	// +Optional

	// Mapping of K8s node with SpectrumScale node
	NodeMapping []NodeMapping `json:"nodeMapping"`

	// Node selector for SpectrumScale CSI Plugin
	PluginNodeSelector []CSINodeSelector `json:"pluginNodeSelector"`

	// +Optional

	// Provisioner image for csi (actually issues provision requests)
	Provisioner string `json:"provisioner,omitempty"`

	// Node selector for provisioner sidecar
	ProvisionerNodeSelector []CSINodeSelector `json:"provisionerNodeSelector"`

	// The path to the gpfs file system mounted on the host machine
	ScaleHostpath string `json:"scaleHostpath"`

	// +Optional

	// An internal counter used by the operator to trigger reloads on secret change
	SecretCounter int `json:"secretCounter"`

	// +Optional

	// A generic trigger to be used in kicking off the ansible operator
	Trigger string `json:"trigger"`

	// +Optional

	// Image name for the csi spectrum scale plugin container
	SpectrumScale string `json:"spectrumScale"`

	// A passthrough option that distributes an imagePullSecrets array to the
	// containers generated by the csi scale operator. Please refer to official
	// k8s documentation for your environment for more details.
	ImagePullSecrets []string `json:"imagePullSecrets"`

	// Array of tolerations that will be distribued to CSI pods. Please refer to
	// official k8s documentation for your environment for more details.
	Tolerations []Toleration `json:"tolerations"`

	Status CSIScaleOperatorStatus `json:"status"`
}

type CSIScaleOperatorStatus struct {
	Conditions []CSICondition `json:"conditions"`
}

type CSICondition struct {
	// Indicates that the plugin is running
	Ready bool `json:"Ready"`
}

type CSINodeSelector struct {

	// Key for node selector
	Key string `json:"key"`

	// Value for key
	Value string `json:"value"`
}

type Toleration struct {

	// +Optional

	// Node taint key name
	Key string `json:"key"`

	// +Optional

	// Valid values are "Exists" and "Equal"
	Operator Operator `json:"operator"`

	// +Optional

	// Required if operator is "Equal"
	Value string `json:"value"`

	// +Optional

	// Valid values are "NoSchedule", "PreferNoSchedule" and "NoExecute".
	// An empty effect matches all effects with given key.
	Effect string `json:"effect"`
}

// +kubebuilder:validation:Enum=NoSchedule;PreferNoSchedule;NoExecute
type Effect string

const (

	// TODO: add doc
	NoSchedule Effect = "NoSchedule"

	// TODO: add doc
	PreferNoSchedule Effect = "PreferNoSchedule"

	// TODO: add doc
	NoExecute Effect = "NoExecute"

	// TODO: add doc
	None Effect = ""
)

// +kubebuilder:validation:Enum=Exists;Equal
type Operator string

const (

	// TODO: add doc
	Exists Operator = "Exists"

	// TODO: add doc
	Equal Operator = "Equal"
)

type NodeMapping struct {

	// K8s node name
	K8sNode string `json:"k8sNode"`

	// SpectrumScale node name
	SpectrumscaleNode string `json:"spectrumscaleNode"`
}

type CSICluster struct {

	// A string specifying a cacert resource name
	Cacert string `json:"cacert,omitempty"`

	// The CSICluster id of the gpfs CSICluster specified (mandatory)
	Id string `json:"id"`

	// The primary file system for the GPFS CSICluster
	Primary CSIFilesystem `json:"primary"`

	// A collection of targets for REST calls
	RestApi []RestApi `json:"restApi"`

	// A string specifying a secret resource name
	Secrets string `json:"secrets"`

	// Require a secure SSL connection to connect to GPFS
	SecureSslMode bool `json:"secureSslMode"`
}

type CSIFilesystem struct {

	// +Optional

	// Inode limit for Primary Fileset
	InodeLimit string `json:"inodeLimit"`

	// +Optional

	// The name of the primary CSIFilesystem
	PrimaryFs string `json:"primaryFs"`

	// +Optional

	// The name of the primary fileset, created in primaryFs
	PrimaryFset string `json:"primaryFset"`

	// +Optional

	// Remote CSICluster ID
	RemoteCluster string `json:"remoteCluster"`
}

type RestApi struct {

	// The hostname of the REST server
	GuiHost string `json:"guiHost"`

	// +Optional

	// The port number running the REST server
	GuiPort int `json:"guiPort"`
}

// CSIScaleOperator is the Schema for the csiscaleoperators API
//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
type CSIScaleOperator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   CSIScaleOperatorSpec   `json:"spec,omitempty"`
	Status CSIScaleOperatorStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// CSIScaleOperatorList contains a list of CSIScaleOperator
type CSIScaleOperatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CSIScaleOperator `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CSIScaleOperator{}, &CSIScaleOperatorList{})
}
