kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: '{{ opName }}-livenessprobe'
  namespace: '{{ namespace }}'
  labels:
    app.kubernetes.io/instance: '{{labelInstance}}'
    app.kubernetes.io/managed-by: '{{labelManage}}'
    app.kubernetes.io/name: '{{labelName}}'
    product: '{{ productName }}'
    release: '{{ labelRelease }}'
spec:
  serviceName: '{{ opName }}-livenessprobe'
  replicas: 1
  selector:
    matchLabels:
      app: "{{ opName }}-livenessprobe"
      product: '{{ productName }}'
  template:
    metadata:
      labels:
        app: '{{ opName }}-livenessprobe'
        app.kubernetes.io/instance: '{{labelInstance}}'
        app.kubernetes.io/managed-by: '{{labelManage}}'
        app.kubernetes.io/name: '{{labelName}}'
        product: '{{ productName }}'
        release: '{{ labelRelease }}'
      annotations:
        productID: '{{annotationProductID}}'
        productName: '{{annotationProductName}}'
        productVersion: '{{annotationProductVersion}}'
    spec:
{% if livenessprobeNodeSelector|length > 0 %}
      nodeSelector:
{% for livenessprobeNodeSelect in livenessprobeNodeSelector %}
        {{ livenessprobeNodeSelect.key }}: "{{ livenessprobeNodeSelect.value }}"
{% endfor %}
{% endif %}
      serviceAccount: "{{ productName }}-livenessprobe"
      containers:
        - name: "{{ opName }}-livenessprobe"
{% if 'apps.openshift.io' in api_groups %}
          securityContext:
            privileged: true
{% endif %}
          image: '{{ livenessprobeimg }}'
          args:
            - "--csi-address=$(ADDRESS)"
#	    - "--health-port=9808"
            - "--v=5" # Debugging
          env:
            - name: ADDRESS
              value: "{{ kubeletRootDirPath }}/plugins/spectrumscale.csi.ibm.com/csi.sock"
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: "{{ kubeletRootDirPath }}/plugins/spectrumscale.csi.ibm.com"
{% if imagePullSecrets | length > 0 %}
      imagePullSecrets:
{% for pullSecret in imagePullSecrets %}
        - name:  "{{ pullSecret }}"
{% endfor %}
{% endif %}

{% if tolerations | length > 0 %}
      tolerations:
{% for toleration in tolerations %}
        - key: "{{ toleration.key }}"
          operator: "{{ toleration.operator }}"
{% if 'Equal' == toleration.operator %}
          value: "{{ toleration.value }}"
{% endif %}
          effect: {{ toleration.effect }}
{% if 'NoExecute' == toleration.effect  and toleration.tolerationSeconds is defined %}
          tolerationSeconds: "{{ toleration.tolerationSeconds }}"
{% endif %}
{% endfor %}
{% endif %}

      volumes:
        - name: socket-dir
          hostPath:
            path: "{{ kubeletRootDirPath }}/plugins/spectrumscale.csi.ibm.com"
            type: DirectoryOrCreate
